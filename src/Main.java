import java.util.Random;

public class Main {

    /*
    Задача
    Реализовать игру "Камень, ножницы, бумага" между двумя компьютерами
     */
    /*
       Теория
       Предположим, что этот проект является частью проекта RSP и мы расширяем его функционал при помощи уже имеющихся
       методов и переменных. Перед нами стоит задача - сгенерировать два хода для компьютера и передать их на проверку
       методу checkWinner, данному методу неважно проверяет ли он ход компьютера или ход человека, он сравнивает две
       переданные ему строки. Но метод makeComputerMove является процедурой, он просто изменяет значение глобальной
       переменной, поэтому второй вызов данного метода не сгенерирует еще один ход, чтобы сделать его более универсальным
       необходимо преобразовать этот метод в функцию, т.е. сделать его возвращающим строку, таким боразом мы сможем передать
       в метод checkWinner две строки
     */

    /*
    Заметки
    Существуют потоки исполнения, которые могут выполнят самые разнообразные действия, в том числе приостанавливать работу
    на какое-то время как в данной программе
    В данной программе в сигнатуре метода main появилось выражение throws InterruptedException - это обработка исключения,
    которое может вощникнуть при работе с потоками. Исключение - это какая-то непредвиденная ситуация, связанная с работой
    блока кода. С ними мы более подробно познакомимся позже.
     */

    static Random random = new Random();

    public static void main(String[] args) throws InterruptedException {

        while (true) {

            System.out.println(checkWinner(makeComputerMove(), makeComputerMove()));
            Thread.sleep(2000);  // Специальная команда потоку заснуть на 2 секунды
        }
    }

    static String makeComputerMove(){

        String compStr = "";
        int n = random.nextInt(3);  // Генерируем ход компьютера

        if (n == 0) {                  // Присваиваем строка в зависимости от числа
            compStr = "Камень";
        }

        if (n == 1) {
            compStr = "Ножницы";
        }

        if (n == 2) {
            compStr = "Бумага";
        }
        return compStr;
    }

    static String checkWinner(String comp1, String comp2){     // Метод лоя проверки победителя

        System.out.println("Игрок 1: " + comp1 + " Игрок 2: " + comp2);

        if(comp1.equals("Камень") && comp2.equals("Ножницы")){      // Проверяем кто победил
            return "Победа игрока 1";
        }
        if(comp1.equals("Камень") && comp2.equals("Бумага")){
            return "Победа игрока 2";
        }
        if(comp1.equals("Ножницы") && comp2.equals("Бумага")){
            return "Победа игрока 1";
        }
        if(comp1.equals("Ножницы") && comp2.equals("Камень")){
            return "Победа игрока 2";
        }

        if(comp1.equals("Бумага") && comp2.equals("Ножницы")){
            return "Победа игрока 2";
        }
        if(comp1.equals("Бумага") && comp2.equals("Камень")){
            return "Победа игрока 1";
        }

        return "Ничья";           // Если никто не победил, значит ходы совпали, поэтому ничья
    }
}


